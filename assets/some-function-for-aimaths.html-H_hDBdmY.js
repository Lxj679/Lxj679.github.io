import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,a as e}from"./app-BXXDmcpg.js";const t="/assets/3e732cdda1c88aa4aa83499fa90f69e-CPnyfppN.jpg",p="/assets/f334d22e7efaed38f3dbd24eaf0430a-Dc-5fN51.jpg",o={},l=e(`<h1 id="引言" tabindex="-1"><a class="header-anchor" href="#引言"><span>引言：</span></a></h1><h2 id="_1-高等数学" tabindex="-1"><a class="header-anchor" href="#_1-高等数学"><span>1. 高等数学</span></a></h2><ul><li>sympy</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 导入sympy 中所有内容</span>
<span class="token keyword">from</span> sympy <span class="token keyword">import</span> <span class="token operator">*</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>求函数极限： <img src="`+t+`" alt="3e732cdda1c88aa4aa83499fa90f69e" style="zoom:33%;"></li></ol><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> sympy
<span class="token keyword">from</span> sympy <span class="token keyword">import</span> oo <span class="token comment"># 注意无穷符号表示形式为两个小写字母</span>
x <span class="token operator">=</span> sympy<span class="token punctuation">.</span>Symbol<span class="token punctuation">(</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 定义 x 为一个符号，表示一个变量。注意 Symbol 第一个字母大写</span>
f <span class="token operator">=</span> sympy<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">/</span>x
<span class="token keyword">print</span><span class="token punctuation">(</span>sympy<span class="token punctuation">.</span>limit<span class="token punctuation">(</span>f<span class="token punctuation">,</span>x<span class="token punctuation">,</span>oo<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 使用 sympy.limit 函数求极限，并且打印出结果</span>

<span class="token comment"># ouput</span>
<span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>求函数导数</li></ol><img src="`+p+`" alt="f334d22e7efaed38f3dbd24eaf0430a" style="zoom:33%;"><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> sympy <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> sympy<span class="token punctuation">.</span>abc <span class="token keyword">import</span> x<span class="token punctuation">,</span> y

<span class="token comment"># arcsinx 数学函数表示形式为 asin</span>
y <span class="token operator">=</span> asin<span class="token punctuation">(</span>sqrt<span class="token punctuation">(</span>sin<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># diff 求导函数</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>diff<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>求偏导数</li></ol><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> sympy <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> sympy<span class="token punctuation">.</span>abc <span class="token keyword">import</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">,</span>f
f <span class="token operator">=</span> x<span class="token operator">**</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token operator">*</span>x<span class="token operator">*</span>y <span class="token operator">+</span> y<span class="token operator">**</span><span class="token number">2</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>diff<span class="token punctuation">(</span>f<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>diff<span class="token punctuation">(</span>f<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>
fx <span class="token operator">=</span> diff<span class="token punctuation">(</span>f<span class="token punctuation">,</span>x<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>fx<span class="token punctuation">.</span>evalf<span class="token punctuation">(</span>subs <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 以字典的形式传入多个变量的值，求函数值</span>
fy <span class="token operator">=</span> diff<span class="token punctuation">(</span>f<span class="token punctuation">,</span>y<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>fy<span class="token punctuation">.</span>evalf<span class="token punctuation">(</span>subs <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># output</span>
<span class="token number">3</span><span class="token operator">*</span>x<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token operator">*</span>y
<span class="token number">3</span><span class="token operator">*</span>x <span class="token operator">+</span> <span class="token number">2</span><span class="token operator">*</span>y
<span class="token number">9.00000000000000</span>
<span class="token number">7.00000000000000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>求方向导数</li></ol><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><ol start="5"><li>求梯度</li></ol><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="6"><li>求定积分</li></ol><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">from</span> scipy<span class="token punctuation">.</span>integrate <span class="token keyword">import</span> quad <span class="token comment"># 导入单积分函数</span>
func <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span>np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span> <span class="token comment"># 定义被积分函数</span>
solution <span class="token operator">=</span> quad<span class="token punctuation">(</span>func<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># 调用 quad 函数</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>solution<span class="token punctuation">)</span>

<span class="token comment"># output</span>
<span class="token punctuation">(</span><span class="token number">1.296467785724373</span><span class="token punctuation">,</span> <span class="token number">1.3977971853986262e-09</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-线性代数-linear-algebra" tabindex="-1"><a class="header-anchor" href="#_2-线性代数-linear-algebra"><span>2. 线性代数（linear algebra)</span></a></h2><h3 id="_2-4-行列式" tabindex="-1"><a class="header-anchor" href="#_2-4-行列式"><span>2.4 行列式</span></a></h3><ol><li>方阵的行列式（np.linalg.det()）</li></ol><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><h2 id="_2-5-矩阵" tabindex="-1"><a class="header-anchor" href="#_2-5-矩阵"><span>2.5 矩阵</span></a></h2><ol><li></li><li></li><li><p>检验矩阵是否相等（np.allclose()）</p></li></ol><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>获取矩阵的秩（np.linalg.matrix_rank()）</li></ol><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><ol start="5"><li>逆矩阵（np.linalg.inv()）</li></ol><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><ol start="6"><li>增广矩阵（np.hastck()）</li></ol><h3 id="_2-6-内积与正交" tabindex="-1"><a class="header-anchor" href="#_2-6-内积与正交"><span>2.6 内积与正交</span></a></h3><ol><li>内积运算（np.dot()）</li></ol><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><ol start="2"><li>获取向量的长度（np.linalg.norm()）</li></ol><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><ol start="3"><li>对原浮点数进行四舍五入</li></ol><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,36),i=[l];function c(r,d){return a(),s("div",null,i)}const k=n(o,[["render",c],["__file","some-function-for-aimaths.html.vue"]]),y=JSON.parse('{"path":"/Notability/Artificial-intelligence/AI-mathematics/some-function-for-aimaths.html","title":"some function in ai maths","lang":"zh-CN","frontmatter":{"title":"some function in ai maths","date":"2024-04-17T01:22:18.000Z","isOriginal":true,"category":["AI Mathematics"],"tag":["python","编程","教程"],"icon":"python","sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"comment":true,"lastUpdated":true,"editLink":true,"backToTop":true,"toc":true,"description":"引言： 1. 高等数学 sympy 求函数极限： 3e732cdda1c88aa4aa83499fa90f69e 求函数导数 f334d22e7efaed38f3dbd24eaf0430a 求偏导数 求方向导数 求梯度 求定积分 2. 线性代数（linear algebra) 2.4 行列式 方阵的行列式（np.linalg.det()） 2.5 矩阵...","head":[["meta",{"property":"og:url","content":"https://dailyrecord4ryan.com/Notability/Artificial-intelligence/AI-mathematics/some-function-for-aimaths.html"}],["meta",{"property":"og:site_name","content":"Website of Ryan"}],["meta",{"property":"og:title","content":"some function in ai maths"}],["meta",{"property":"og:description","content":"引言： 1. 高等数学 sympy 求函数极限： 3e732cdda1c88aa4aa83499fa90f69e 求函数导数 f334d22e7efaed38f3dbd24eaf0430a 求偏导数 求方向导数 求梯度 求定积分 2. 线性代数（linear algebra) 2.4 行列式 方阵的行列式（np.linalg.det()） 2.5 矩阵..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-21T12:35:37.000Z"}],["meta",{"property":"article:author","content":"Ryan"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:tag","content":"编程"}],["meta",{"property":"article:tag","content":"教程"}],["meta",{"property":"article:published_time","content":"2024-04-17T01:22:18.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-21T12:35:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"some function in ai maths\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-17T01:22:18.000Z\\",\\"dateModified\\":\\"2024-04-21T12:35:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ryan\\",\\"url\\":\\"https://dailyrecord4ryan.com\\"}]}"]]},"headers":[{"level":2,"title":"1. 高等数学","slug":"_1-高等数学","link":"#_1-高等数学","children":[]},{"level":2,"title":"2. 线性代数（linear algebra)","slug":"_2-线性代数-linear-algebra","link":"#_2-线性代数-linear-algebra","children":[{"level":3,"title":"2.4 行列式","slug":"_2-4-行列式","link":"#_2-4-行列式","children":[]}]},{"level":2,"title":"2.5 矩阵","slug":"_2-5-矩阵","link":"#_2-5-矩阵","children":[{"level":3,"title":"2.6 内积与正交","slug":"_2-6-内积与正交","link":"#_2-6-内积与正交","children":[]}]}],"git":{"createdTime":1713288329000,"updatedTime":1713702937000,"contributors":[{"name":"Lxj679","email":"2944170474@qq.com","commits":6}]},"readingTime":{"minutes":1.53,"words":458},"filePathRelative":"Notability/Artificial-intelligence/AI-mathematics/some-function-for-aimaths.md","localizedDate":"2024年4月17日","excerpt":"\\n<h2>1. 高等数学</h2>\\n<ul>\\n<li>sympy</li>\\n</ul>\\n<div class=\\"language-python\\" data-ext=\\"py\\" data-title=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token comment\\"># 导入sympy 中所有内容</span>\\n<span class=\\"token keyword\\">from</span> sympy <span class=\\"token keyword\\">import</span> <span class=\\"token operator\\">*</span>\\n</code></pre></div>","autoDesc":true}');export{k as comp,y as data};
