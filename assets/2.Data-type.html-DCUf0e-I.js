import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o as i,c as u,b as n,e as r,w as a,a as e,d as s}from"./app-Cd1-nzTS.js";const k="/assets/0fef5d75d64cf6cc225b35701b9987e-1711462387989-3-CKGTBy5a.png",d={},m=e(`<h2 id="_1-数字型-int-float" tabindex="-1"><a class="header-anchor" href="#_1-数字型-int-float"><span>1. 数字型（int，float）</span></a></h2><h3 id="_1-1-代码示例" tabindex="-1"><a class="header-anchor" href="#_1-1-代码示例"><span>1.1 代码示例</span></a></h3><ol><li>整型</li></ol><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>int_num <span class="token operator">=</span> <span class="token number">1</span>
t <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span>int_num<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;int num type is:&gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;直接检测数据类型，并输出:&gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>int_num<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># output</span>
<span class="token builtin">int</span> num <span class="token builtin">type</span> <span class="token keyword">is</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;int&#39;</span><span class="token operator">&gt;</span>
直接检测数据类型，并输出<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;int&#39;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>浮点数</li></ol><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>float_num <span class="token operator">=</span> <span class="token number">1.5</span>
t <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span>float_num<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>float_num<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;float num type is:&gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;直接检测数据类型，并输出:&gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>float_num<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># output</span>
<span class="token number">1.5</span>
<span class="token builtin">float</span> num <span class="token builtin">type</span> <span class="token keyword">is</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;float&#39;</span><span class="token operator">&gt;</span>
直接检测数据类型，并输出<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;float&#39;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-字符串-str" tabindex="-1"><a class="header-anchor" href="#_2-字符串-str"><span>2. 字符串（str）</span></a></h2><h3 id="_2-1-代码示例" tabindex="-1"><a class="header-anchor" href="#_2-1-代码示例"><span>2.1 代码示例</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&#39;Hello Dailyrecord4ryan&#39;</span>
t <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;string type is:&gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;直接检测数据类型，并输出:&gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># output</span>
Hello Dailyrecord4ryan
string <span class="token builtin">type</span> <span class="token keyword">is</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;str&#39;</span><span class="token operator">&gt;</span>
直接检测数据类型，并输出<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;str&#39;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-字符串的三大特性" tabindex="-1"><a class="header-anchor" href="#_2-2-字符串的三大特性"><span>2.2 字符串的三大特性</span></a></h3><ol><li>有序性 <ol><li>从左到右，下标是从0开始；</li><li>从右到左，下标是从-1开始；</li><li>引号里面出现，都算一个下标；</li></ol></li><li>不可变性 <ol><li>字符串被创建出来之后，就不能被改变；</li><li>注意：我们说的不可变，是代码运行的过程当中，不能有对字符串修改、添加、删除之类的操作；</li></ol></li><li>任意字符： <ol><li>键盘上可以输入的字符，都可以是字符串的元素；</li><li>字符放到字符串中，都将成为字符串。（也就是：里面的每一个元素都可以称为：子字符）；</li></ol></li></ol><h2 id="_3-列表-list" tabindex="-1"><a class="header-anchor" href="#_3-列表-list"><span>3. 列表 (list)</span></a></h2><h3 id="_3-1-代码示例" tabindex="-1"><a class="header-anchor" href="#_3-1-代码示例"><span>3.1 代码示例</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;hello dailyrecord4ryan&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&quot;look&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;book&#39;</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">&#39;汉堡包&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">]</span>
t <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;list type is:&gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;直接检测数据类型，并输出:&gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># output </span>
<span class="token punctuation">[</span><span class="token string">&#39;hello dailyrecord4ryan&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;look&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;book&#39;</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">&#39;汉堡包&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">]</span>
<span class="token builtin">list</span> <span class="token builtin">type</span> <span class="token keyword">is</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;list&#39;</span><span class="token operator">&gt;</span>
直接检测数据类型，并输出<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;list&#39;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-列表的三大特性" tabindex="-1"><a class="header-anchor" href="#_3-2-列表的三大特性"><span>3.2 列表的三大特性</span></a></h3><ol><li>有序性 <ol><li>从左到有，下标是从0开始；</li><li>从右到左，下表是从-1开始；</li><li>列表的每个元素算一个： <ol><li>比如：list = <code>[&#39;dailyrecord4ryan&#39;, 12]</code>;</li><li>上面 list 有两个元素，下标分别是： <ol><li><code>dailyrecord4ryan</code>是下标0（从左到右），也是下标-2（从右到左）；</li><li><code>12</code>是下标1（从左到右），也是下标-1（从右到左）；</li></ol></li></ol></li></ol></li><li>可变性：在程序运行的过程当中，列表可以改变（添加、删除、修改）</li><li>任意数据类型：注意，这里所说的任意数据类型，指的是Python所拥有的数据类型；</li></ol><details class="hint-container details"><summary>Python所拥有的数据类型（下面只包含基础类型）</summary><figure><img src="`+k+`" alt="Data Type" tabindex="0" loading="lazy"><figcaption>Data Type</figcaption></figure></details><h2 id="_4-元组-tuple" tabindex="-1"><a class="header-anchor" href="#_4-元组-tuple"><span>4. 元组 (Tuple)</span></a></h2><h3 id="_4-1-代码示例" tabindex="-1"><a class="header-anchor" href="#_4-1-代码示例"><span>4.1 代码示例</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>tup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&#39;aiyc&#39;</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
t <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span>tup<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tup<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;tup type is:&gt;&gt;&gt;&#39;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;直接检测数据类型，并输出:&gt;&gt;&gt;&#39;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>tup<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># output</span>
<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&#39;aiyc&#39;</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
tup <span class="token builtin">type</span> <span class="token keyword">is</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;tuple&#39;</span><span class="token operator">&gt;</span>
直接检测数据类型，并输出<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;tuple&#39;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-元组的三大特性" tabindex="-1"><a class="header-anchor" href="#_4-2-元组的三大特性"><span>4.2 元组的三大特性</span></a></h3><ol><li><p>有序性</p><ol><li><p>从左到右，下标是从0开始</p></li><li><p>从右到左，下表是从-1开始</p><ol><li><p>比如<code>tup=(&#39;dailyrecord4ryan&#39;, 12)</code></p></li><li><p>上面 tup 有两个元素，下标分别是：</p><ol><li><p><code>dailyrecord4ryan</code>是下标0（从左到右），也是下标-2（从右到左）；</p></li><li><p><code>12</code>是下标1（从左到右），也是下标-1（从右到左）；</p></li></ol></li></ol></li></ol></li><li><p>不可变性</p><ol><li><p>元组被创建出来之后，就不能改变；</p></li><li><p>注意：我们说的不可变，是在代码运行当中，不能有对元组修改、添加、删除之类的操作；</p></li></ol></li><li><p>任意数据类型：注意，这里所说的任意数据类型，指的是Python所拥有的数据类型；</p></li></ol><h2 id="_5-探究-元组-列表" tabindex="-1"><a class="header-anchor" href="#_5-探究-元组-列表"><span>5. 探究（元组&amp;列表）</span></a></h2><div class="hint-container info"><p class="hint-container-title">为什么有列表，还需要元组</p><p>列表和元组到底用哪一个呢？</p></div><ol><li><p>如果存储的数据或数量是可变的，比如社交平台上的一个日志功能，是统计一个用户在一周之内看了哪些用户的帖子——那么则用列表更合适。</p></li><li><p>如果存储的数据和数量不变，比如你有一个系统（软件），需要返回的是一个地点的经纬度，然后直接传给用户查看——那么肯定选用元组更合适。</p></li></ol><ul><li><p>假设</p><ul><li><p>假设1：现在有一个仓库，你要向仓库添加物品。仓库很大，现有的物品也很多，你不知道还有没有位置可以存放。此时我们是不是需要聘请一个仓库管理员，这样我们就可以直接问仓库管理员：里面还有哪个位置（是否有位置？）仓库管理员会告诉你，并且你可以直接把你的物品，添加进去。</p><p>问题来了，仓库管理员为什么知道仓库是否有位置？——因为仓库管理员会一直跟踪这个仓库的状态；</p></li><li><p>假设2：现在有一个原子弹的仓库，仓库创建之后，只能存放一个原子弹。那么，我们需要设立一个专门的人员跟踪：原子弹仓库的状态吗？——不需要，此时在聘请一个就显得浪费了。（不然，领导没油水了～hhhhh）</p></li></ul></li><li><p>Why？</p><ul><li>用户日志📔，是不是会一直变动（记录📝看了哪些帖子），我们是不是需要有一个类似仓库管理员的“人”，来跟踪并且知道：是否有位置（是否有空间/内存），还需要知道在哪里添加。——列表更合适，因为列表可变。「可变意味着：添加、删除、修改」 <ul><li>元组为什么不合适？——因为，你每当需要添加数据的时候，就得重新创建一个新的元组。（就类似于：你创建原子弹的仓库，肯定是刚刚好可以存放一个，那么你想存放两个的时候，只能重新再创建一个仓库。）</li></ul></li><li>经纬度会改变吗？显然是不会的，那么就不需要一个多余的“人”去跟踪状态。——用列表可以吗？可以！但是没必要。「因为我们不需要仓库管理员」用列表有点浪费资源了。元组的功能刚刚好够用。</li><li><strong><span style="color:orange;">我们讲究：不浪费，合适就好。</span></strong></li></ul></li></ul><h2 id="_6-字典-dict" tabindex="-1"><a class="header-anchor" href="#_6-字典-dict"><span>6. 字典（dict）</span></a></h2><h3 id="_6-1-代码示例" tabindex="-1"><a class="header-anchor" href="#_6-1-代码示例"><span>6.1 代码示例</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;aiyc&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">&quot;int&quot;</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;tup&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
t <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;d type is:&gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;直接检测数据类型，并输出:&gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">#output</span>
<span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;aiyc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">&#39;int&#39;</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;tup&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
d <span class="token builtin">type</span> <span class="token keyword">is</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;dict&#39;</span><span class="token operator">&gt;</span>
直接检测数据类型，并输出<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;dict&#39;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-字典的特性" tabindex="-1"><a class="header-anchor" href="#_6-2-字典的特性"><span>6.2 字典的特性</span></a></h3><ol><li>无序性（python3.6+之后有序） <ol><li>先以无序理解即可；</li><li>有些前期基本用不到；</li></ol></li><li>字典的组成：是由一系列的key和value组成。<code>d = {&quot;key1&quot;: &quot;value1&quot;, &quot;key2&quot;: &quot;value2&quot;......}</code></li><li>key: <ol><li>不可变的数据类型，才可以当作字典的key；</li><li>比如：字符串、数字、布尔、元组；</li></ol></li><li>value：任意数据类型，Python所拥有的数据类型；</li><li>可变性：可以添加、修改、删除键对值；</li></ol><h2 id="_7-集合-set" tabindex="-1"><a class="header-anchor" href="#_7-集合-set"><span>7. 集合（set）</span></a></h2><h3 id="_7-1-代码示例" tabindex="-1"><a class="header-anchor" href="#_7-1-代码示例"><span>7.1 代码示例</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;aiyc&#39;</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token string">&#39;book&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">}</span>
t <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;set type is:&gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;直接检测数据类型，并输出:&gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">#output</span>
<span class="token punctuation">{</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token string">&#39;aiyc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;book&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token builtin">set</span> <span class="token builtin">type</span> <span class="token keyword">is</span><span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;set&#39;</span><span class="token operator">&gt;</span>
直接检测数据类型，并输出<span class="token punctuation">:</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;set&#39;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-2-集合的特性" tabindex="-1"><a class="header-anchor" href="#_7-2-集合的特性"><span>7.2 集合的特性</span></a></h3><ol><li>无序性：集合是没有顺序的，也就是：没有下标；</li></ol><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;ryan&#39;</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token string">&#39;book&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>

<span class="token comment">#output</span>
<span class="token punctuation">{</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;ryan&#39;</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token string">&#39;book&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">注意</p><p>如果你运行集合很多次，或者其中某一次，集合顺序没有改变，我们也不能说集合是有序的。</p><p>Why？你掷骰子，500次都是6点，你能说投骰子是确定性事件吗？——显然是不可以。</p></div>`,38),b={start:"2"},g=n("p",null,"确定性：",-1),v=n("ol",null,[n("li",null,"集合的每一个值都是确定的；（也就是需要不可变的数据类型)"),n("li",null,"比如：数字型、布尔、元组、字符串；"),n("li",null,"举个例子：列表为什么不行？——列表可变，所以造成不确定性，故：不行。")],-1),y=n("div",{class:"language-python line-numbers-mode","data-ext":"py","data-title":"py"},[n("pre",{class:"language-python"},[n("code",null,[s("set1"),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'ryan'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1.1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'book'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token boolean"},"False"),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("set1"),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token comment"},"#output"),s(`
`),n("span",{class:"token punctuation"},"{"),n("span",{class:"token boolean"},"False"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'book'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1.1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'ryan'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),h=n("div",{class:"language-python line-numbers-mode","data-ext":"py","data-title":"py"},[n("pre",{class:"language-python"},[n("code",null,[s("set1 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("set1"),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token comment"},"#output"),s(`
Traceback `),n("span",{class:"token punctuation"},"("),s("most recent call last"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
  File `),n("span",{class:"token string"},'"C:\\Users\\Administrator\\PycharmProjects\\Coder\\Python\\code2.py"'),n("span",{class:"token punctuation"},","),s(" line "),n("span",{class:"token number"},"90"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"in"),s(),n("span",{class:"token operator"},"<"),s("module"),n("span",{class:"token operator"},">"),s(`
    set1 `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}"),s(`
TypeError`),n("span",{class:"token punctuation"},":"),s(" unhashable "),n("span",{class:"token builtin"},"type"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},"'list'"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),_=e(`<li><p>互异性：出现重复的不会报错，会自动去掉重复的；</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>

<span class="token comment">#output</span>
<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>可变性：可以对集合添加、删除数据，但是不能被修改。（注意：删除是无法指定下标删除的元素）</p></li>`,2),f=e(`<h2 id="_8-布尔型-bool" tabindex="-1"><a class="header-anchor" href="#_8-布尔型-bool"><span>8. 布尔型（bool）</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>condition <span class="token operator">=</span> <span class="token boolean">True</span>  <span class="token comment">#False</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">#output</span>
<span class="token boolean">True</span>
<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;bool&#39;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-章节测试" tabindex="-1"><a class="header-anchor" href="#_9-章节测试"><span>9. 章节测试</span></a></h2><p>(下面，我们来进行章节测试吧)[https://dailyrecord4ryan.com/Notability/python/chapter1-test.html]</p>`,4);function w(q,x){const o=c("CodeTabs");return i(),u("div",null,[m,n("ol",b,[n("li",null,[g,v,r(o,{id:"418",data:[{id:"不可变测试"},{id:"可变测试"}]},{title0:a(({value:t,isActive:p})=>[s("不可变测试")]),title1:a(({value:t,isActive:p})=>[s("可变测试")]),tab0:a(({value:t,isActive:p})=>[y]),tab1:a(({value:t,isActive:p})=>[h]),_:1})]),_]),f])}const N=l(d,[["render",w],["__file","2.Data-type.html.vue"]]),F=JSON.parse(`{"path":"/Notability/python/2.Data-type.html","title":"2. Data","lang":"zh-CN","frontmatter":{"title":"2. Data","date":"2024-03-26T21:29:15.000Z","isOriginal":true,"category":["python"],"tag":["python","编程","教程"],"icon":"python","sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"comment":true,"lastUpdated":true,"editLink":true,"backToTop":true,"toc":true,"description":"1. 数字型（int，float） 1.1 代码示例 整型 浮点数 2. 字符串（str） 2.1 代码示例 2.2 字符串的三大特性 有序性 从左到右，下标是从0开始； 从右到左，下标是从-1开始； 引号里面出现，都算一个下标； 不可变性 字符串被创建出来之后，就不能被改变； 注意：我们说的不可变，是代码运行的过程当中，不能有对字符串修改、添加、删除...","head":[["meta",{"property":"og:url","content":"https://dailyrecord4ryan.com/Notability/python/2.Data-type.html"}],["meta",{"property":"og:site_name","content":"Website of Ryan"}],["meta",{"property":"og:title","content":"2. Data"}],["meta",{"property":"og:description","content":"1. 数字型（int，float） 1.1 代码示例 整型 浮点数 2. 字符串（str） 2.1 代码示例 2.2 字符串的三大特性 有序性 从左到右，下标是从0开始； 从右到左，下标是从-1开始； 引号里面出现，都算一个下标； 不可变性 字符串被创建出来之后，就不能被改变； 注意：我们说的不可变，是代码运行的过程当中，不能有对字符串修改、添加、删除..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-18T10:35:29.000Z"}],["meta",{"property":"article:author","content":"Ryan"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:tag","content":"编程"}],["meta",{"property":"article:tag","content":"教程"}],["meta",{"property":"article:published_time","content":"2024-03-26T21:29:15.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-18T10:35:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"2. Data\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-26T21:29:15.000Z\\",\\"dateModified\\":\\"2024-04-18T10:35:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ryan\\",\\"url\\":\\"https://dailyrecord4ryan.com\\"}]}"]]},"headers":[{"level":2,"title":"1. 数字型（int，float）","slug":"_1-数字型-int-float","link":"#_1-数字型-int-float","children":[{"level":3,"title":"1.1 代码示例","slug":"_1-1-代码示例","link":"#_1-1-代码示例","children":[]}]},{"level":2,"title":"2. 字符串（str）","slug":"_2-字符串-str","link":"#_2-字符串-str","children":[{"level":3,"title":"2.1 代码示例","slug":"_2-1-代码示例","link":"#_2-1-代码示例","children":[]},{"level":3,"title":"2.2 字符串的三大特性","slug":"_2-2-字符串的三大特性","link":"#_2-2-字符串的三大特性","children":[]}]},{"level":2,"title":"3. 列表  (list)","slug":"_3-列表-list","link":"#_3-列表-list","children":[{"level":3,"title":"3.1 代码示例","slug":"_3-1-代码示例","link":"#_3-1-代码示例","children":[]},{"level":3,"title":"3.2 列表的三大特性","slug":"_3-2-列表的三大特性","link":"#_3-2-列表的三大特性","children":[]}]},{"level":2,"title":"4. 元组  (Tuple)","slug":"_4-元组-tuple","link":"#_4-元组-tuple","children":[{"level":3,"title":"4.1 代码示例","slug":"_4-1-代码示例","link":"#_4-1-代码示例","children":[]},{"level":3,"title":"4.2 元组的三大特性","slug":"_4-2-元组的三大特性","link":"#_4-2-元组的三大特性","children":[]}]},{"level":2,"title":"5. 探究（元组&列表）","slug":"_5-探究-元组-列表","link":"#_5-探究-元组-列表","children":[]},{"level":2,"title":"6. 字典（dict）","slug":"_6-字典-dict","link":"#_6-字典-dict","children":[{"level":3,"title":"6.1 代码示例","slug":"_6-1-代码示例","link":"#_6-1-代码示例","children":[]},{"level":3,"title":"6.2 字典的特性","slug":"_6-2-字典的特性","link":"#_6-2-字典的特性","children":[]}]},{"level":2,"title":"7. 集合（set）","slug":"_7-集合-set","link":"#_7-集合-set","children":[{"level":3,"title":"7.1 代码示例","slug":"_7-1-代码示例","link":"#_7-1-代码示例","children":[]},{"level":3,"title":"7.2 集合的特性","slug":"_7-2-集合的特性","link":"#_7-2-集合的特性","children":[]}]},{"level":2,"title":"8. 布尔型（bool）","slug":"_8-布尔型-bool","link":"#_8-布尔型-bool","children":[]},{"level":2,"title":"9. 章节测试","slug":"_9-章节测试","link":"#_9-章节测试","children":[]}],"git":{"createdTime":1711463402000,"updatedTime":1713436529000,"contributors":[{"name":"Lxj679","email":"2944170474@qq.com","commits":10}]},"readingTime":{"minutes":7.36,"words":2207},"filePathRelative":"Notability/python/2.Data-type.md","localizedDate":"2024年3月26日","excerpt":"<h2>1. 数字型（int，float）</h2>\\n<h3>1.1 代码示例</h3>\\n<ol>\\n<li>整型</li>\\n</ol>\\n<div class=\\"language-python\\" data-ext=\\"py\\" data-title=\\"py\\"><pre class=\\"language-python\\"><code>int_num <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span>\\nt <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">type</span><span class=\\"token punctuation\\">(</span>int_num<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"int num type is:&gt;&gt;&gt;\\"</span><span class=\\"token punctuation\\">,</span> t<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"直接检测数据类型，并输出:&gt;&gt;&gt;\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token builtin\\">type</span><span class=\\"token punctuation\\">(</span>int_num<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token comment\\"># output</span>\\n<span class=\\"token builtin\\">int</span> num <span class=\\"token builtin\\">type</span> <span class=\\"token keyword\\">is</span><span class=\\"token punctuation\\">:</span><span class=\\"token operator\\">&gt;&gt;</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">class</span> <span class=\\"token string\\">'int'</span><span class=\\"token operator\\">&gt;</span>\\n直接检测数据类型，并输出<span class=\\"token punctuation\\">:</span><span class=\\"token operator\\">&gt;&gt;</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">class</span> <span class=\\"token string\\">'int'</span><span class=\\"token operator\\">&gt;</span>\\n</code></pre></div>","autoDesc":true}`);export{N as comp,F as data};
