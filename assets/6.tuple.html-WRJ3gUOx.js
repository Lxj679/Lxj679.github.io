import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t}from"./app-Dgb-lUtl.js";const p="/assets/image-20240415110337842-DHj0togp.png",e={},o=t(`<h2 id="_1-创建元组" tabindex="-1"><a class="header-anchor" href="#_1-创建元组"><span>1. 创建元组</span></a></h2><ul><li>使用小括号创建；</li><li>里面元素用英文逗号隔开；</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>tup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tup<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>tup<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># output</span>
<span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;tuple&#39;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-列表和元组的对比" tabindex="-1"><a class="header-anchor" href="#_2-列表和元组的对比"><span>2. 列表和元组的对比</span></a></h2><figure><img src="`+p+`" alt="image-20240415110337842" tabindex="0" loading="lazy"><figcaption>image-20240415110337842</figcaption></figure><p>列表和元组的区别：</p><ul><li>列表中：元素用方括号<code>[]</code>包裹；元组中则是\`。</li><li>列表中的元素可以被修改、添加、删除，即列表是可变的数据类型，元组是不可变的数据类型。</li></ul><h2 id="_3-元组是不可变的" tabindex="-1"><a class="header-anchor" href="#_3-元组是不可变的"><span>3. 元组是不可变的</span></a></h2><p>但凡我们想修改元组，都是会报错的：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>tup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span>
tup<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;d&#39;</span>

<span class="token comment"># output</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">&quot;C:\\Users\\Administrator\\PycharmProjects\\Coder\\Python\\code6.py&quot;</span><span class="token punctuation">,</span> line <span class="token number">11</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
    tup<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;d&#39;</span>
TypeError<span class="token punctuation">:</span> <span class="token string">&#39;tuple&#39;</span> <span class="token builtin">object</span> does <span class="token keyword">not</span> support item assignment
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-元组的取值和分片操作" tabindex="-1"><a class="header-anchor" href="#_4-元组的取值和分片操作"><span>4. 元组的取值和分片操作</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>tup  <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;lilei&#39;</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tup<span class="token punctuation">)</span> <span class="token comment"># (2, &#39;lilei&#39;, 19)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tup<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 2</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tup<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># (2, 19)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tup<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># (19, &#39;lilei&#39;, 2)</span>

<span class="token comment"># output</span>
<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;lilei&#39;</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span>
<span class="token number">2</span>
<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">&#39;lilei&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>::: tips Question</p><p>基于上面的元组，提取得到：<code>(&#39;lilei&#39;, 2)</code></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>tup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;lilei&#39;</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tup<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># output</span>
<span class="token punctuation">(</span><span class="token string">&#39;lilei&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>:::</p><h2 id="_5-元组的特点" tabindex="-1"><a class="header-anchor" href="#_5-元组的特点"><span>5. 元组的特点</span></a></h2><p><strong>思考一下</strong> ：如果元组只有一个元素，是什么类型？</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>tup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>tup<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># output</span>
<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;int&#39;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行代码后，我们可知：如果元组只有一个元素，那么元素本身的类型。</p><p>为什么会是这个结果呢？</p><ul><li>我们常规在数学计算中括号是在运算的时候用来保证优先级和在适当的情况下，可以直接去掉。</li><li><code>(1 + 2) * (2 + 1) * = (3) * (3) = 3 * 3 = 9</code>, 所以，你可以发现 <code>(3) * (3) = 3 * 3</code> 左边的 <code>(3)</code> 不就是上面所说的“ 元组只有一个元素的情况”。</li></ul><p>如何解决呢？</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>tup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">)</span> <span class="token comment"># 如果元组只有一个元素，加个逗号可以以此区分</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tup<span class="token punctuation">)</span>

<span class="token comment"># output</span>
<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-元组的拼接" tabindex="-1"><a class="header-anchor" href="#_6-元组的拼接"><span>6. 元组的拼接</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>tup1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
tup2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>
new_tup <span class="token operator">=</span> tup1 <span class="token operator">+</span> tup2
<span class="token keyword">print</span><span class="token punctuation">(</span>new_tup<span class="token punctuation">)</span>

<span class="token comment"># output</span>
<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-元组的排序" tabindex="-1"><a class="header-anchor" href="#_7-元组的排序"><span>7. 元组的排序</span></a></h2><ul><li>因为元组不可变，所以先把元组转换成列表；</li><li>然后再进行排序；</li><li>接着进行转换回元组；</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>tup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
lst <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>tup<span class="token punctuation">)</span>
tup <span class="token operator">=</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>tup<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-zip" tabindex="-1"><a class="header-anchor" href="#_8-zip"><span>8. zip()</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>lst1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
lst2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span>
<span class="token comment"># t = zip(lst1, lst2)</span>
<span class="token comment"># print(list(t))</span>
zipped <span class="token operator">=</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>lst1<span class="token punctuation">,</span> lst2<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>zipped<span class="token punctuation">)</span> <span class="token comment"># 是一个 zip 对象、迭代器地址</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>zipped<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#  转换成列表来查看，转换成元组也可以但是不方便后续改变</span>
<span class="token comment"># print(*zipped)</span>

<span class="token comment"># print(*zipped) # * 号 用来解包</span>
<span class="token comment"># 当然也可以用循环，但是目前不涉及</span>
<span class="token comment"># 上面的代码中，你用了列表，后面就用不了 *，因为数据已经被提取走了</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以把元组转为该种形式</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>tup1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
tup2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span>
zipped <span class="token operator">=</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>tup1<span class="token punctuation">,</span> tup2<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>zipped<span class="token punctuation">)</span> <span class="token comment"># 是一个迭代器地址</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>zipped<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 转换成列表查看，也可以转换成元组</span>

<span class="token comment"># output</span>
<span class="token operator">&lt;</span><span class="token builtin">zip</span> <span class="token builtin">object</span> at <span class="token number">0x000001EDFCBEBAC0</span><span class="token operator">&gt;</span>
<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在字典中也有类似的结构</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">}</span>
Item_id <span class="token operator">=</span> dict1<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span>
Item <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>dict1<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>Item_id<span class="token punctuation">,</span> Item<span class="token punctuation">,</span> sep <span class="token operator">=</span> <span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,35),c=[o];function l(i,u){return s(),a("div",null,c)}const d=n(e,[["render",l],["__file","6.tuple.html.vue"]]),m=JSON.parse(`{"path":"/Notability/python/6.tuple.html","title":"6. Tuple","lang":"zh-CN","frontmatter":{"title":"6. Tuple","date":"2024-04-15T10:57:09.000Z","isOriginal":true,"category":["python"],"tag":["python","编程","教程"],"icon":"python","sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"comment":true,"lastUpdated":true,"editLink":true,"backToTop":true,"toc":true,"description":"1. 创建元组 使用小括号创建； 里面元素用英文逗号隔开； 2. 列表和元组的对比 image-20240415110337842image-20240415110337842 列表和元组的区别： 列表中：元素用方括号[]包裹；元组中则是\`。 列表中的元素可以被修改、添加、删除，即列表是可变的数据类型，元组是不可变的数据类型。 3. 元组是不可变的 但...","head":[["meta",{"property":"og:url","content":"https://dailyrecord4ryan.com/Notability/python/6.tuple.html"}],["meta",{"property":"og:site_name","content":"Website of Ryan"}],["meta",{"property":"og:title","content":"6. Tuple"}],["meta",{"property":"og:description","content":"1. 创建元组 使用小括号创建； 里面元素用英文逗号隔开； 2. 列表和元组的对比 image-20240415110337842image-20240415110337842 列表和元组的区别： 列表中：元素用方括号[]包裹；元组中则是\`。 列表中的元素可以被修改、添加、删除，即列表是可变的数据类型，元组是不可变的数据类型。 3. 元组是不可变的 但..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-19T23:28:44.000Z"}],["meta",{"property":"article:author","content":"Ryan"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:tag","content":"编程"}],["meta",{"property":"article:tag","content":"教程"}],["meta",{"property":"article:published_time","content":"2024-04-15T10:57:09.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-19T23:28:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"6. Tuple\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-15T10:57:09.000Z\\",\\"dateModified\\":\\"2024-04-19T23:28:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ryan\\",\\"url\\":\\"https://dailyrecord4ryan.com\\"}]}"]]},"headers":[{"level":2,"title":"1. 创建元组","slug":"_1-创建元组","link":"#_1-创建元组","children":[]},{"level":2,"title":"2. 列表和元组的对比","slug":"_2-列表和元组的对比","link":"#_2-列表和元组的对比","children":[]},{"level":2,"title":"3. 元组是不可变的","slug":"_3-元组是不可变的","link":"#_3-元组是不可变的","children":[]},{"level":2,"title":"4. 元组的取值和分片操作","slug":"_4-元组的取值和分片操作","link":"#_4-元组的取值和分片操作","children":[]},{"level":2,"title":"5. 元组的特点","slug":"_5-元组的特点","link":"#_5-元组的特点","children":[]},{"level":2,"title":"6. 元组的拼接","slug":"_6-元组的拼接","link":"#_6-元组的拼接","children":[]},{"level":2,"title":"7.  元组的排序","slug":"_7-元组的排序","link":"#_7-元组的排序","children":[]},{"level":2,"title":"8. zip()","slug":"_8-zip","link":"#_8-zip","children":[]}],"git":{"createdTime":1713149865000,"updatedTime":1713569324000,"contributors":[{"name":"Lxj679","email":"2944170474@qq.com","commits":7}]},"readingTime":{"minutes":2.59,"words":777},"filePathRelative":"Notability/python/6.tuple.md","localizedDate":"2024年4月15日","excerpt":"<h2>1. 创建元组</h2>\\n<ul>\\n<li>使用小括号创建；</li>\\n<li>里面元素用英文逗号隔开；</li>\\n</ul>\\n<div class=\\"language-python\\" data-ext=\\"py\\" data-title=\\"py\\"><pre class=\\"language-python\\"><code>tup <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'a'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'b'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'c'</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span>tup<span class=\\"token punctuation\\">,</span> <span class=\\"token builtin\\">type</span><span class=\\"token punctuation\\">(</span>tup<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token comment\\"># output</span>\\n<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'a'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'b'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'c'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">class</span> <span class=\\"token string\\">'tuple'</span><span class=\\"token operator\\">&gt;</span>\\n</code></pre></div>","autoDesc":true}`);export{d as comp,m as data};
